extends layout

block stylesheets
  link(rel="stylesheet", href="/layout.css")
  link(rel="stylesheet", href="/forum-chat.css")

 

block content
  .chat-container
    a.back-link(href="/forums") ← Back to Forums
    h2 Chat Room: #{languageName} Forum

    .messages#messageContainer
      if messages && messages.length
        each message in messages
          .message-box
            .meta
              span.sender 👤 #{message.Sender || 'Anonymous'}
              span.time 🕒 #{new Date(message.SentAt).toLocaleString()}
            .message-text= message.MessageText
      else
        p No messages yet.

    form#postForm.message-form(method="POST", action=`/groupchat/${groupChatID}/send`)
      input(type="hidden", name="groupChatID", value=groupChatID)
      textarea(name="messageText", placeholder="Type your message...", required)
      button(type="submit") Send

block scripts
  script(src="/socket.io/socket.io.js")
  script.
    const socket = io();
    const roomID = "#{groupChatID}";
    const userID = "#{user.id}";
    const userName = "#{user.name}";  // Ensure userName is properly set here from session or context
    const messageContainer = document.getElementById("messageContainer");
    const messageForm = document.getElementById("postForm");
    const textarea = messageForm.querySelector("textarea");

    // Prevent sending the same message multiple times
    let lastMessage = null;

    function appendMessage({ sender, sentAt, messageText }) {
      // Prevent duplicate messages
      if (lastMessage === messageText) return;
      lastMessage = messageText;

      const box = document.createElement("div");
      box.className = "message-box";
      const formattedTime = new Date(sentAt).toLocaleString();
      box.innerHTML = `
        <div class="meta">
          <span class="sender">👤 ${sender || 'Anonymous'}</span>
          <span class="time">🕒 ${formattedTime}</span>
        </div>
        <div class="message-text">${messageText}</div>
      `;
      messageContainer.appendChild(box);
      messageContainer.scrollTop = messageContainer.scrollHeight;
    }

    // 🔁 Load old messages (fallback reload from API)
    fetch(`/api/groupchat/${roomID}/messages`)
      .then(res => res.json())
      .then(messages => {
        messageContainer.innerHTML = "";
        if (messages.length === 0) {
          messageContainer.innerHTML = "<p>No messages yet.</p>";
        } else {
          messages.forEach(appendMessage);
        }
      })
      .catch(err => {
        console.error("❌ Failed to fetch messages:", err);
      });

    // 🔗 Join chat room
    socket.emit("joinRoom", roomID);

    // ✉️ Form submission
    messageForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const messageText = textarea.value.trim();
      if (!messageText) return;

      const messagePayload = {
        groupChatID: roomID,
        userID: userID,
        messageText,
        userName
      };

      socket.emit("newMessage", messagePayload);

      // Save to DB
      await fetch(`/groupchat/${roomID}/send`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(messagePayload)
      });

      appendMessage({
        sender: "You",
        sentAt: new Date().toISOString(),
        messageText
      });

      textarea.value = "";
    });

    // ⏬ Receive broadcasted messages
    socket.on("messageBroadcast", (data) => {
      appendMessage(data);
    });

    // 🔔 Notify join
    socket.on("userJoined", (username) => {
      const box = document.createElement("div");
      box.className = "message-box";
      box.innerHTML = `<strong>${username} has joined the chat!</strong>`;
      messageContainer.appendChild(box);
      messageContainer.scrollTop = messageContainer.scrollHeight;
    });
